#include <stdio.h>
#include <stdlib.h>
#include <string.h>
enum {

  MAXLINE = 256,

};


char *tokenizer(char *buf, const char *deli);

char *skip(char *buf);

static char *string=NULL;

int alphabet[26];

int main(int argc, char *argv[]) {
  FILE *infp;
  char buf[MAXLINE];
  char *token;
  int i,opindex,val;
  char variable1,variable2;
  i=0;
  infp = stdin;
  if (argc > 1) {
    infp = fopen(argv[1], "r");
    if (infp == NULL) {
      perror("open");
      exit(1);
    }
  }

  while (fgets(buf, MAXLINE, infp) != NULL) {
    if (buf[0] == '#')
      continue;
    token = tokenizer(buf, "\t\n"); // each line
    while (*token != '\0') {
    if (strcmp(token, "set") == 0) {  
      while (*token != '\0'){
        token = skip(token);
        token = tokenizer(token, "\t\n");
        if (strcmp(token, "to") == 0 || strcmp(token, "by") == 0 ||
          strcmp(token, "from") == 0)
        continue;
        if (i == 0)
          {
            variable1 = *token;
            i +=1;
          }
        else if (i == 1){ 
          if (atoi(token) == 0){
            variable2 = *token;
            alphabet[variable1-'a'] = alphabet[variable2-'a'];
            i=0;
          } else{
            val = atoi(token);
            alphabet[variable1-'a'] = val;
            i=0;

          }
        }
      }

    }
      if (strcmp(token, "add") == 0){
        while (*token != '\0'){
               token = skip(token);
               token = tokenizer(token, "\t\n");
         if (strcmp(token, "to") == 0 || strcmp(token, "by") == 0 ||
                   strcmp(token, "from") == 0)
               continue;
         if (i == 0)
         {
           if(atoi(token)==0)
           {
             variable1 = *token;
             i +=1;
           }
           else
           {
             val = atoi(token);
             i +=1;
           }
         }
         else if (i==1)
         {
           variable2 = *token;
           if (variable1 != ' ')
           {
             alphabet[variable2-'a']= alphabet[variable2-'a']+alphabet[variable1-'a'];
             i = 0;
           }
           else
           {
             alphabet[variable2-'a']= alphabet[variable2-'a']+ val;
             i = 0;
     }
         }

          }

       }
    if (strcmp(token, "divide") == 0)
    {
  while (*token != '\0')
  {
         token = skip(token);
         token = tokenizer(token, "\t\n");
       if (strcmp(token, "to") == 0 || strcmp(token, "by") == 0 ||
             strcmp(token, "from") == 0)
             continue;
   if (i==0)
         {
          variable1 = *token;
          i +=1;
         }
   else
        {
          if (atoi(token)==0) // token is variable
          {
            variable2 = *token;
            alphabet[variable1-'a'] = alphabet[variable1-'a']/alphabet[variable2-'a'];
            i=0;
          }
          else
          {
            val = atoi(token);
            alphabet[variable1-'a'] = alphabet[variable1-'a']/val;
            i=0;
          }
        }	 
      }
    }
      if (strcmp(token, "multiply") == 0)
      {
        while (*token != '\0')
        {
          token = skip(token); 
          token = tokenizer(token, "\t\n");
          if (strcmp(token, "to") == 0 || strcmp(token, "by") == 0 ||
           strcmp(token, "from") == 0)
           continue;
          if (i==0)
          {
            variable1 = *token;
            i +=1;
          }
          else
          {
            if (atoi(token)==0)
            {
              variable2 = *token;
              alphabet[variable1-'a'] = alphabet[variable1-'a']*alphabet[variable2-'a'];
              i=0;
            }
            else
            {
              val = atoi(token);
              alphabet[variable1-'a'] = alphabet[variable1-'a']*val;
              i=0;
            }
          }
        }
      }
    }
  i = 0;
  }
  return 0;
 }
  



char *tokenizer(char *buf, const char *deli){ 
  char *start;
  // if (buf == NULL) {
  //   for (;*start == '\0'; start++)
  //   if (*start == '\0') start++;
  //   for (;*start != '\0'; start++){ 
  //     if (*start == ' ' || *start == '\n'){

  char* chr = buf;

  for (;*chr == '\0'; chr++);

  for (; *chr != '\0'; chr++){
    if (*chr == ' ' || *chr == '\n'){
      *chr = '\0';
      break;
    }
  }
  return buf;
}

char *skip(char *buf){ 
  char* chr = buf;

  for (;*chr != '\0'; chr++);

  chr++;

  return chr++;
}
